"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_push_v2_adapter_1 = require("../../lib/adapters/linter-push-v2-adapter");
const ls = require("../../lib/languageclient");
const chai_1 = require("chai");
const atom_1 = require("atom");
const messageUrl = 'dummy';
const messageSolutions = ['dummy'];
class CustomLinterPushV2Adapter extends linter_push_v2_adapter_1.default {
    diagnosticToV2Message(path, diagnostic) {
        const message = super.diagnosticToV2Message(path, diagnostic);
        message.url = messageUrl;
        message.solutions = messageSolutions;
        return message;
    }
}
describe('CustomLinterPushV2Adapter', () => {
    describe('diagnosticToMessage', () => {
        it('converts Diagnostic and path to a linter$Message', () => {
            const filePath = '/a/b/c/d';
            const diagnostic = {
                message: 'This is a message',
                range: {
                    start: { line: 1, character: 2 },
                    end: { line: 3, character: 4 },
                },
                source: 'source',
                code: 'code',
                severity: ls.DiagnosticSeverity.Information,
            };
            const connection = { onPublishDiagnostics() { } };
            const adapter = new CustomLinterPushV2Adapter(connection);
            const result = adapter.diagnosticToV2Message(filePath, diagnostic);
            chai_1.expect(result.excerpt).equals(diagnostic.message);
            chai_1.expect(result.linterName).equals(diagnostic.source);
            chai_1.expect(result.location.file).equals(filePath);
            chai_1.expect(result.location.position).deep.equals(new atom_1.Range(new atom_1.Point(1, 2), new atom_1.Point(3, 4)));
            chai_1.expect(result.severity).equals('info');
            chai_1.expect(result.url).equals(messageUrl);
            chai_1.expect(result.solutions).deep.equals(messageSolutions);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNGQUE0RTtBQUM1RSwrQ0FBK0M7QUFDL0MsK0JBQThCO0FBQzlCLCtCQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDM0IsTUFBTSxnQkFBZ0IsR0FBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTFDLCtCQUFnQyxTQUFRLGdDQUFtQjtJQUNsRCxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsVUFBeUI7UUFDbEUsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5RCxPQUFPLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQztRQUN6QixPQUFPLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQUVELFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxFQUFFLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFO1lBQzFELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztZQUM1QixNQUFNLFVBQVUsR0FBa0I7Z0JBQ2hDLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLEtBQUssRUFBRTtvQkFDTCxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUM7b0JBQzlCLEdBQUcsRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBQztpQkFDN0I7Z0JBQ0QsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsV0FBVzthQUM1QyxDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQVEsRUFBQyxvQkFBb0IsS0FBSSxDQUFDLEVBQUMsQ0FBQztZQUNwRCxNQUFNLE9BQU8sR0FBRyxJQUFJLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFbkUsYUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELGFBQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRCxhQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQUssQ0FBQyxJQUFJLFlBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxZQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxRixhQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxhQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN0QyxhQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGludGVyUHVzaFYyQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvbGludGVyLXB1c2gtdjItYWRhcHRlcic7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgeyBQb2ludCwgUmFuZ2UgfSBmcm9tICdhdG9tJztcclxuXHJcbmNvbnN0IG1lc3NhZ2VVcmwgPSAnZHVtbXknO1xyXG5jb25zdCBtZXNzYWdlU29sdXRpb25zOiBhbnlbXSA9IFsnZHVtbXknXTtcclxuXHJcbmNsYXNzIEN1c3RvbUxpbnRlclB1c2hWMkFkYXB0ZXIgZXh0ZW5kcyBMaW50ZXJQdXNoVjJBZGFwdGVyIHtcclxuICBwdWJsaWMgZGlhZ25vc3RpY1RvVjJNZXNzYWdlKHBhdGg6IHN0cmluZywgZGlhZ25vc3RpYzogbHMuRGlhZ25vc3RpYykge1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IHN1cGVyLmRpYWdub3N0aWNUb1YyTWVzc2FnZShwYXRoLCBkaWFnbm9zdGljKTtcclxuICAgIG1lc3NhZ2UudXJsID0gbWVzc2FnZVVybDtcclxuICAgIG1lc3NhZ2Uuc29sdXRpb25zID0gbWVzc2FnZVNvbHV0aW9ucztcclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG4gIH1cclxufVxyXG5cclxuZGVzY3JpYmUoJ0N1c3RvbUxpbnRlclB1c2hWMkFkYXB0ZXInLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ2RpYWdub3N0aWNUb01lc3NhZ2UnLCAoKSA9PiB7XHJcbiAgICBpdCgnY29udmVydHMgRGlhZ25vc3RpYyBhbmQgcGF0aCB0byBhIGxpbnRlciRNZXNzYWdlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBmaWxlUGF0aCA9ICcvYS9iL2MvZCc7XHJcbiAgICAgIGNvbnN0IGRpYWdub3N0aWM6IGxzLkRpYWdub3N0aWMgPSB7XHJcbiAgICAgICAgbWVzc2FnZTogJ1RoaXMgaXMgYSBtZXNzYWdlJyxcclxuICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgc3RhcnQ6IHtsaW5lOiAxLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgICAgZW5kOiB7bGluZTogMywgY2hhcmFjdGVyOiA0fSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNvdXJjZTogJ3NvdXJjZScsXHJcbiAgICAgICAgY29kZTogJ2NvZGUnLFxyXG4gICAgICAgIHNldmVyaXR5OiBscy5EaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBjb25uZWN0aW9uOiBhbnkgPSB7b25QdWJsaXNoRGlhZ25vc3RpY3MoKSB7fX07XHJcbiAgICAgIGNvbnN0IGFkYXB0ZXIgPSBuZXcgQ3VzdG9tTGludGVyUHVzaFYyQWRhcHRlcihjb25uZWN0aW9uKTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYWRhcHRlci5kaWFnbm9zdGljVG9WMk1lc3NhZ2UoZmlsZVBhdGgsIGRpYWdub3N0aWMpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdC5leGNlcnB0KS5lcXVhbHMoZGlhZ25vc3RpYy5tZXNzYWdlKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5saW50ZXJOYW1lKS5lcXVhbHMoZGlhZ25vc3RpYy5zb3VyY2UpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmxvY2F0aW9uLmZpbGUpLmVxdWFscyhmaWxlUGF0aCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQubG9jYXRpb24ucG9zaXRpb24pLmRlZXAuZXF1YWxzKG5ldyBSYW5nZShuZXcgUG9pbnQoMSwgMiksIG5ldyBQb2ludCgzLCA0KSkpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnNldmVyaXR5KS5lcXVhbHMoJ2luZm8nKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC51cmwpLmVxdWFscyhtZXNzYWdlVXJsKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zb2x1dGlvbnMpLmRlZXAuZXF1YWxzKG1lc3NhZ2VTb2x1dGlvbnMpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=
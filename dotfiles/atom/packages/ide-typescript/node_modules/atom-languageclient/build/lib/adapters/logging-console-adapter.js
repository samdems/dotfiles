"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const languageclient_1 = require("../languageclient");
// Adapts Atom's user notifications to those of the language server protocol.
class LoggingConsoleAdapter {
    // Create a new {LoggingConsoleAdapter} that will listen for log messages
    // via the supplied {LanguageClientConnection}.
    //
    // * `connection` A {LanguageClientConnection} to the language server that will provide log messages.
    constructor(connection) {
        this._consoles = new Set();
        connection.onLogMessage(this.logMessage.bind(this));
    }
    // Dispose this adapter ensuring any resources are freed and events unhooked.
    dispose() {
        this.detachAll();
    }
    // Public: Attach this {LoggingConsoleAdapter} to a given {ConsoleApi}.
    //
    // * `console` A {ConsoleApi} that wants to receive messages.
    attach(console) {
        this._consoles.add(console);
    }
    // Public: Remove all {ConsoleApi}'s attached to this adapter.
    detachAll() {
        this._consoles.clear();
    }
    // Log a message using the Atom IDE UI Console API.
    //
    // * `params` The {LogMessageParams} received from the language server
    //            indicating the details of the message to be loggedd.
    logMessage(params) {
        switch (params.type) {
            case languageclient_1.MessageType.Error: {
                this._consoles.forEach((c) => c.error(params.message));
                return;
            }
            case languageclient_1.MessageType.Warning: {
                this._consoles.forEach((c) => c.warn(params.message));
                return;
            }
            case languageclient_1.MessageType.Info: {
                this._consoles.forEach((c) => c.info(params.message));
                return;
            }
            case languageclient_1.MessageType.Log: {
                this._consoles.forEach((c) => c.log(params.message));
                return;
            }
        }
    }
}
exports.default = LoggingConsoleAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy1jb25zb2xlLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRhcHRlcnMvbG9nZ2luZy1jb25zb2xlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxzREFJMkI7QUFFM0IsNkVBQTZFO0FBQzdFO0lBR0UseUVBQXlFO0lBQ3pFLCtDQUErQztJQUMvQyxFQUFFO0lBQ0YscUdBQXFHO0lBQ3JHLFlBQVksVUFBb0M7UUFOeEMsY0FBUyxHQUFvQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBTzdDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsNkVBQTZFO0lBQ3RFLE9BQU87UUFDWixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxFQUFFO0lBQ0YsNkRBQTZEO0lBQ3RELE1BQU0sQ0FBQyxPQUFtQjtRQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsOERBQThEO0lBQ3ZELFNBQVM7UUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxtREFBbUQ7SUFDbkQsRUFBRTtJQUNGLHNFQUFzRTtJQUN0RSxrRUFBa0U7SUFDMUQsVUFBVSxDQUFDLE1BQXdCO1FBQ3pDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNuQixLQUFLLDRCQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPO2FBQ1I7WUFDRCxLQUFLLDRCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPO2FBQ1I7WUFDRCxLQUFLLDRCQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPO2FBQ1I7WUFDRCxLQUFLLDRCQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNyRCxPQUFPO2FBQ1I7U0FDRjtJQUNILENBQUM7Q0FDRjtBQXBERCx3Q0FvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zb2xlQXBpIH0gZnJvbSAnYXRvbS1pZGUnO1xyXG5pbXBvcnQge1xyXG4gIExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcclxuICBMb2dNZXNzYWdlUGFyYW1zLFxyXG4gIE1lc3NhZ2VUeXBlLFxyXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuXHJcbi8vIEFkYXB0cyBBdG9tJ3MgdXNlciBub3RpZmljYXRpb25zIHRvIHRob3NlIG9mIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dpbmdDb25zb2xlQWRhcHRlciB7XHJcbiAgcHJpdmF0ZSBfY29uc29sZXM6IFNldDxDb25zb2xlQXBpPiA9IG5ldyBTZXQoKTtcclxuXHJcbiAgLy8gQ3JlYXRlIGEgbmV3IHtMb2dnaW5nQ29uc29sZUFkYXB0ZXJ9IHRoYXQgd2lsbCBsaXN0ZW4gZm9yIGxvZyBtZXNzYWdlc1xyXG4gIC8vIHZpYSB0aGUgc3VwcGxpZWQge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0uXHJcbiAgLy9cclxuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCB3aWxsIHByb3ZpZGUgbG9nIG1lc3NhZ2VzLlxyXG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbikge1xyXG4gICAgY29ubmVjdGlvbi5vbkxvZ01lc3NhZ2UodGhpcy5sb2dNZXNzYWdlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgLy8gRGlzcG9zZSB0aGlzIGFkYXB0ZXIgZW5zdXJpbmcgYW55IHJlc291cmNlcyBhcmUgZnJlZWQgYW5kIGV2ZW50cyB1bmhvb2tlZC5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGV0YWNoQWxsKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IEF0dGFjaCB0aGlzIHtMb2dnaW5nQ29uc29sZUFkYXB0ZXJ9IHRvIGEgZ2l2ZW4ge0NvbnNvbGVBcGl9LlxyXG4gIC8vXHJcbiAgLy8gKiBgY29uc29sZWAgQSB7Q29uc29sZUFwaX0gdGhhdCB3YW50cyB0byByZWNlaXZlIG1lc3NhZ2VzLlxyXG4gIHB1YmxpYyBhdHRhY2goY29uc29sZTogQ29uc29sZUFwaSk6IHZvaWQge1xyXG4gICAgdGhpcy5fY29uc29sZXMuYWRkKGNvbnNvbGUpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBSZW1vdmUgYWxsIHtDb25zb2xlQXBpfSdzIGF0dGFjaGVkIHRvIHRoaXMgYWRhcHRlci5cclxuICBwdWJsaWMgZGV0YWNoQWxsKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY29uc29sZXMuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIC8vIExvZyBhIG1lc3NhZ2UgdXNpbmcgdGhlIEF0b20gSURFIFVJIENvbnNvbGUgQVBJLlxyXG4gIC8vXHJcbiAgLy8gKiBgcGFyYW1zYCBUaGUge0xvZ01lc3NhZ2VQYXJhbXN9IHJlY2VpdmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlclxyXG4gIC8vICAgICAgICAgICAgaW5kaWNhdGluZyB0aGUgZGV0YWlscyBvZiB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRkLlxyXG4gIHByaXZhdGUgbG9nTWVzc2FnZShwYXJhbXM6IExvZ01lc3NhZ2VQYXJhbXMpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAocGFyYW1zLnR5cGUpIHtcclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5FcnJvcjoge1xyXG4gICAgICAgIHRoaXMuX2NvbnNvbGVzLmZvckVhY2goKGMpID0+IGMuZXJyb3IocGFyYW1zLm1lc3NhZ2UpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5XYXJuaW5nOiB7XHJcbiAgICAgICAgdGhpcy5fY29uc29sZXMuZm9yRWFjaCgoYykgPT4gYy53YXJuKHBhcmFtcy5tZXNzYWdlKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgTWVzc2FnZVR5cGUuSW5mbzoge1xyXG4gICAgICAgIHRoaXMuX2NvbnNvbGVzLmZvckVhY2goKGMpID0+IGMuaW5mbyhwYXJhbXMubWVzc2FnZSkpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLkxvZzoge1xyXG4gICAgICAgIHRoaXMuX2NvbnNvbGVzLmZvckVhY2goKGMpID0+IGMubG9nKHBhcmFtcy5tZXNzYWdlKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const atom_1 = require("atom");
class SignatureHelpAdapter {
    constructor(server, grammarScopes) {
        this._disposables = new atom_1.CompositeDisposable();
        this._connection = server.connection;
        this._capabilities = server.capabilities;
        this._grammarScopes = grammarScopes;
    }
    // Returns a {Boolean} indicating this adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.signatureHelpProvider != null;
    }
    dispose() {
        this._disposables.dispose();
    }
    attach(register) {
        const { signatureHelpProvider } = this._capabilities;
        assert(signatureHelpProvider != null);
        let triggerCharacters;
        if (signatureHelpProvider && Array.isArray(signatureHelpProvider.triggerCharacters)) {
            triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
        }
        this._disposables.add(register({
            priority: 1,
            grammarScopes: this._grammarScopes,
            triggerCharacters,
            getSignatureHelp: this.getSignatureHelp.bind(this),
        }));
    }
    // Public: Retrieves signature help for a given editor and position.
    getSignatureHelp(editor, point) {
        return this._connection.signatureHelp(convert_1.default.editorToTextDocumentPositionParams(editor, point));
    }
}
exports.default = SignatureHelpAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLWhlbHAtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWtDO0FBQ2xDLHdDQUFpQztBQUVqQywrQkFJYztBQU9kO0lBTUUsWUFBWSxNQUFvQixFQUFFLGFBQXVCO1FBTGpELGlCQUFZLEdBQXdCLElBQUksMEJBQW1CLEVBQUUsQ0FBQztRQU1wRSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxnRkFBZ0Y7SUFDaEYsNEJBQTRCO0lBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXNDO1FBQzNELE9BQU8sa0JBQWtCLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDO0lBQzFELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQXVDO1FBQ25ELE1BQU0sRUFBQyxxQkFBcUIsRUFBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDbkQsTUFBTSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUksaUJBQTBDLENBQUM7UUFDL0MsSUFBSSxxQkFBcUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDbkYsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN0RTtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixRQUFRLENBQUM7WUFDUCxRQUFRLEVBQUUsQ0FBQztZQUNYLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNsQyxpQkFBaUI7WUFDakIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbkQsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsb0VBQW9FO0lBQzdELGdCQUFnQixDQUFDLE1BQWtCLEVBQUUsS0FBWTtRQUN0RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGlCQUFPLENBQUMsa0NBQWtDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUNGO0FBN0NELHVDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xyXG5pbXBvcnQgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5pbXBvcnQgeyBBY3RpdmVTZXJ2ZXIgfSBmcm9tICcuLi9zZXJ2ZXItbWFuYWdlcic7XHJcbmltcG9ydCB7XHJcbiAgQ29tcG9zaXRlRGlzcG9zYWJsZSxcclxuICBQb2ludCxcclxuICBUZXh0RWRpdG9yLFxyXG59IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQge1xyXG4gIExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcclxuICBTZXJ2ZXJDYXBhYmlsaXRpZXMsXHJcbiAgU2lnbmF0dXJlSGVscCxcclxufSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYXR1cmVIZWxwQWRhcHRlciB7XHJcbiAgcHJpdmF0ZSBfZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gIHByaXZhdGUgX2Nvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbjtcclxuICBwcml2YXRlIF9jYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcztcclxuICBwcml2YXRlIF9ncmFtbWFyU2NvcGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgY29uc3RydWN0b3Ioc2VydmVyOiBBY3RpdmVTZXJ2ZXIsIGdyYW1tYXJTY29wZXM6IHN0cmluZ1tdKSB7XHJcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gc2VydmVyLmNvbm5lY3Rpb247XHJcbiAgICB0aGlzLl9jYXBhYmlsaXRpZXMgPSBzZXJ2ZXIuY2FwYWJpbGl0aWVzO1xyXG4gICAgdGhpcy5fZ3JhbW1hclNjb3BlcyA9IGdyYW1tYXJTY29wZXM7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm5zIGEge0Jvb2xlYW59IGluZGljYXRpbmcgdGhpcyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxyXG4gIC8vIGdpdmVuIHNlcnZlckNhcGFiaWxpdGllcy5cclxuICBwdWJsaWMgc3RhdGljIGNhbkFkYXB0KHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLnNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXR0YWNoKHJlZ2lzdGVyOiBhdG9tSWRlLlNpZ25hdHVyZUhlbHBSZWdpc3RyeSk6IHZvaWQge1xyXG4gICAgY29uc3Qge3NpZ25hdHVyZUhlbHBQcm92aWRlcn0gPSB0aGlzLl9jYXBhYmlsaXRpZXM7XHJcbiAgICBhc3NlcnQoc2lnbmF0dXJlSGVscFByb3ZpZGVyICE9IG51bGwpO1xyXG5cclxuICAgIGxldCB0cmlnZ2VyQ2hhcmFjdGVyczogU2V0PHN0cmluZz4gfCB1bmRlZmluZWQ7XHJcbiAgICBpZiAoc2lnbmF0dXJlSGVscFByb3ZpZGVyICYmIEFycmF5LmlzQXJyYXkoc2lnbmF0dXJlSGVscFByb3ZpZGVyLnRyaWdnZXJDaGFyYWN0ZXJzKSkge1xyXG4gICAgICB0cmlnZ2VyQ2hhcmFjdGVycyA9IG5ldyBTZXQoc2lnbmF0dXJlSGVscFByb3ZpZGVyLnRyaWdnZXJDaGFyYWN0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5hZGQoXHJcbiAgICAgIHJlZ2lzdGVyKHtcclxuICAgICAgICBwcmlvcml0eTogMSxcclxuICAgICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLl9ncmFtbWFyU2NvcGVzLFxyXG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzLFxyXG4gICAgICAgIGdldFNpZ25hdHVyZUhlbHA6IHRoaXMuZ2V0U2lnbmF0dXJlSGVscC5iaW5kKHRoaXMpLFxyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFJldHJpZXZlcyBzaWduYXR1cmUgaGVscCBmb3IgYSBnaXZlbiBlZGl0b3IgYW5kIHBvc2l0aW9uLlxyXG4gIHB1YmxpYyBnZXRTaWduYXR1cmVIZWxwKGVkaXRvcjogVGV4dEVkaXRvciwgcG9pbnQ6IFBvaW50KTogUHJvbWlzZTxTaWduYXR1cmVIZWxwIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2lnbmF0dXJlSGVscChDb252ZXJ0LmVkaXRvclRvVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMoZWRpdG9yLCBwb2ludCkpO1xyXG4gIH1cclxufVxyXG4iXX0=
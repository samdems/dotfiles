import { ActiveServer } from '../server-manager';
import { CompletionContext, CompletionItem, CompletionList, CompletionParams, ServerCapabilities, TextEdit } from '../languageclient';
import { Point, TextEditor } from 'atom';
import * as ac from 'atom/autocomplete-plus';
export default class AutocompleteAdapter {
    static canAdapt(serverCapabilities: ServerCapabilities): boolean;
    static canResolve(serverCapabilities: ServerCapabilities): boolean;
    private _suggestionCache;
    private _cancellationTokens;
    getSuggestions(server: ActiveServer, request: ac.SuggestionsRequestedEvent, onDidConvertCompletionItem?: (item: CompletionItem, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent) => void, minimumWordLength?: number): Promise<ac.AnySuggestion[]>;
    completeSuggestion(server: ActiveServer, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent, onDidConvertCompletionItem?: (item: CompletionItem, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent) => void): Promise<ac.AnySuggestion>;
    static setReplacementPrefixOnSuggestions(suggestions: ac.AnySuggestion[], prefix: string): void;
    static getTriggerCharacter(request: ac.SuggestionsRequestedEvent, triggerChars: string[]): string;
    static getPrefixWithTrigger(request: ac.SuggestionsRequestedEvent, triggerPoint: Point): string;
    static createCompletionParams(request: ac.SuggestionsRequestedEvent, triggerCharacter: string): CompletionParams;
    static createCompletionContext(triggerCharacter: string): CompletionContext;
    completionItemsToSuggestions(completionItems: CompletionItem[] | CompletionList, request: ac.SuggestionsRequestedEvent, onDidConvertCompletionItem?: (item: CompletionItem, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent) => void): Map<ac.AnySuggestion, [CompletionItem, boolean]>;
    static completionItemToSuggestion(item: CompletionItem, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent, onDidConvertCompletionItem?: (item: CompletionItem, suggestion: ac.AnySuggestion, request: ac.SuggestionsRequestedEvent) => void): ac.AnySuggestion;
    static applyCompletionItemToSuggestion(item: CompletionItem, suggestion: ac.TextSuggestion): void;
    static applyTextEditToSuggestion(textEdit: TextEdit | undefined, editor: TextEditor, suggestion: ac.TextSuggestion): void;
    static applySnippetToSuggestion(item: CompletionItem, suggestion: ac.SnippetSuggestion): void;
    static completionKindToSuggestionType(kind: number | undefined): string;
}

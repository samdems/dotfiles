"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const autocomplete_adapter_1 = require("../../lib/adapters/autocomplete-adapter");
const ls = require("../../lib/languageclient");
const sinon = require("sinon");
const atom_1 = require("atom");
const chai_1 = require("chai");
const helpers_js_1 = require("../helpers.js");
describe('AutoCompleteAdapter', () => {
    function createActiveServerSpy() {
        return {
            capabilities: { completionProvider: {} },
            connection: new ls.LanguageClientConnection(helpers_js_1.createSpyConnection()),
            disposable: new atom_1.CompositeDisposable(),
            process: undefined,
            projectPath: '/',
        };
    }
    beforeEach(() => {
        global.sinon = sinon.sandbox.create();
    });
    afterEach(() => {
        global.sinon.restore();
    });
    const request = {
        editor: helpers_js_1.createFakeEditor(),
        bufferPosition: new atom_1.Point(123, 456),
        prefix: 'lab',
        scopeDescriptor: { getScopesArray() { return ['some.scope']; } },
        activatedManually: true,
    };
    const completionItems = [
        {
            label: 'label1',
            kind: ls.CompletionItemKind.Keyword,
            detail: 'description1',
            documentation: 'a very exciting keyword',
            sortText: 'z',
        },
        {
            label: 'label2',
            kind: ls.CompletionItemKind.Field,
            detail: 'description2',
            documentation: 'a very exciting field',
            sortText: 'a',
        },
        {
            label: 'label3',
            kind: ls.CompletionItemKind.Variable,
            detail: 'description3',
            documentation: 'a very exciting variable',
        },
        {
            label: 'filteredout',
            kind: ls.CompletionItemKind.Snippet,
            detail: 'description4',
            documentation: 'should not appear',
            sortText: 'zzz',
        },
    ];
    describe('getSuggestions', () => {
        const server = createActiveServerSpy();
        sinon.stub(server.connection, 'completion').resolves(completionItems);
        it('gets AutoComplete suggestions via LSP given an AutoCompleteRequest', () => __awaiter(this, void 0, void 0, function* () {
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = yield autoCompleteAdapter.getSuggestions(server, request);
            chai_1.expect(results.length).equals(3);
            chai_1.expect(results[0].text).equals('label2');
            chai_1.expect(results[1].description).equals('a very exciting variable');
            chai_1.expect(results[2].type).equals('keyword');
        }));
    });
    describe('completeSuggestion', () => {
        const partialItems = [
            {
                label: 'label1',
                kind: ls.CompletionItemKind.Keyword,
                sortText: 'z',
            },
            {
                label: 'label2',
                kind: ls.CompletionItemKind.Field,
                sortText: 'a',
            },
            {
                label: 'label3',
                kind: ls.CompletionItemKind.Variable,
            },
        ];
        const server = createActiveServerSpy();
        sinon.stub(server.connection, 'completion').resolves(partialItems);
        sinon.stub(server.connection, 'completionItemResolve').resolves({
            label: 'label3',
            kind: ls.CompletionItemKind.Variable,
            detail: 'description3',
            documentation: 'a very exciting variable',
        });
        it('resolves suggestions via LSP given an AutoCompleteRequest', () => __awaiter(this, void 0, void 0, function* () {
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = yield autoCompleteAdapter.getSuggestions(server, request);
            chai_1.expect(results[2].description).equals(undefined);
            const resolvedItem = yield autoCompleteAdapter.completeSuggestion(server, results[2], request);
            chai_1.expect(resolvedItem && resolvedItem.description).equals('a very exciting variable');
        }));
    });
    describe('createCompletionParams', () => {
        it('creates CompletionParams from an AutocompleteRequest with no trigger', () => {
            const result = autocomplete_adapter_1.default.createCompletionParams(request, '');
            chai_1.expect(result.textDocument.uri).equals('file:///a/b/c/d.js');
            chai_1.expect(result.position).deep.equals({ line: 123, character: 456 });
            chai_1.expect(result.context && result.context.triggerKind === ls.CompletionTriggerKind.Invoked);
            chai_1.expect(result.context && result.context.triggerCharacter === undefined);
        });
        it('creates CompletionParams from an AutocompleteRequest with a trigger', () => {
            const result = autocomplete_adapter_1.default.createCompletionParams(request, '.');
            chai_1.expect(result.textDocument.uri).equals('file:///a/b/c/d.js');
            chai_1.expect(result.position).deep.equals({ line: 123, character: 456 });
            chai_1.expect(result.context && result.context.triggerKind === ls.CompletionTriggerKind.TriggerCharacter);
            chai_1.expect(result.context && result.context.triggerCharacter === '.');
        });
    });
    describe('completionItemsToSuggestions', () => {
        it('converts LSP CompletionItem array to AutoComplete Suggestions array', () => {
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = Array.from(autoCompleteAdapter.completionItemsToSuggestions(completionItems, request));
            chai_1.expect(results.length).equals(4);
            chai_1.expect(results[0][0].text).equals('label2');
            chai_1.expect(results[1][0].description).equals('a very exciting variable');
            chai_1.expect(results[2][0].type).equals('keyword');
        });
        it('converts LSP CompletionList to AutoComplete Suggestions array', () => {
            const completionList = { items: completionItems, isIncomplete: false };
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = Array.from(autoCompleteAdapter.completionItemsToSuggestions(completionList, request));
            chai_1.expect(results.length).equals(4);
            chai_1.expect(results[0][0].description).equals('a very exciting field');
            chai_1.expect(results[1][0].text).equals('label3');
        });
        it('converts LSP CompletionList to AutoComplete Suggestions array using the onDidConvertCompletionItem', () => {
            const completionList = { items: completionItems, isIncomplete: false };
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = Array.from(autoCompleteAdapter.completionItemsToSuggestions(completionList, request, (c, a, r) => {
                a.text = c.label + ' ok';
                a.displayText = r.scopeDescriptor.getScopesArray()[0];
            }));
            chai_1.expect(results.length).equals(4);
            chai_1.expect(results[0][0].displayText).equals('some.scope');
            chai_1.expect(results[1][0].text).equals('label3 ok');
        });
        it('converts empty array into an empty AutoComplete Suggestions array', () => {
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = Array.from(autoCompleteAdapter.completionItemsToSuggestions([], request));
            chai_1.expect(results.length).equals(0);
        });
    });
    describe('completionItemToSuggestion', () => {
        it('converts LSP CompletionItem to AutoComplete Suggestion without textEdit', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'keyword',
                documentation: 'a truly useful keyword',
            };
            const result = { text: '' };
            autocomplete_adapter_1.default.completionItemToSuggestion(completionItem, result, request);
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('keyword');
            chai_1.expect(result.description).equals('a truly useful keyword');
            chai_1.expect(result.descriptionMarkdown).equals('a truly useful keyword');
        });
        it('converts LSP CompletionItem to AutoComplete Suggestion with textEdit', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Variable,
                detail: 'number',
                documentation: 'a truly useful variable',
                textEdit: {
                    range: {
                        start: { line: 10, character: 20 },
                        end: { line: 30, character: 40 },
                    },
                    newText: 'newText',
                },
            };
            const autocompleteRequest = {
                editor: helpers_js_1.createFakeEditor(),
                bufferPosition: new atom_1.Point(123, 456),
                prefix: 'def',
                scopeDescriptor: { getScopesArray() { return ['some.scope']; } },
                activatedManually: false,
            };
            sinon.stub(autocompleteRequest.editor, 'getTextInBufferRange').returns('replacementPrefix');
            const result = {};
            autocomplete_adapter_1.default.completionItemToSuggestion(completionItem, result, autocompleteRequest);
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('variable');
            chai_1.expect(result.rightLabel).equals('number');
            chai_1.expect(result.description).equals('a truly useful variable');
            chai_1.expect(result.descriptionMarkdown).equals('a truly useful variable');
            chai_1.expect(result.replacementPrefix).equals('replacementPrefix');
            chai_1.expect(result.text).equals('newText');
            chai_1.expect(autocompleteRequest.editor.getTextInBufferRange.calledOnce).equals(true);
            chai_1.expect(autocompleteRequest.editor.getTextInBufferRange.getCall(0).args).deep.equals([
                new atom_1.Range(new atom_1.Point(10, 20), new atom_1.Point(30, 40)),
            ]);
        });
    });
    describe('applyCompletionItemToSuggestion', () => {
        it('converts LSP CompletionItem with insertText and filterText to AutoComplete Suggestion', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'detail',
                documentation: 'a very exciting keyword',
            };
            const result = {};
            autocomplete_adapter_1.default.applyCompletionItemToSuggestion(completionItem, result);
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('a very exciting keyword');
            chai_1.expect(result.descriptionMarkdown).equals('a very exciting keyword');
        });
        it('converts LSP CompletionItem with missing documentation to AutoComplete Suggestion', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'detail',
            };
            const result = {};
            autocomplete_adapter_1.default.applyCompletionItemToSuggestion(completionItem, result);
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals(undefined);
            chai_1.expect(result.descriptionMarkdown).equals(undefined);
        });
        it('converts LSP CompletionItem with markdown documentation to AutoComplete Suggestion', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'detail',
                documentation: { value: 'Some *markdown*', kind: 'markdown' },
            };
            const result = {};
            autocomplete_adapter_1.default.applyCompletionItemToSuggestion(completionItem, result);
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals(undefined);
            chai_1.expect(result.descriptionMarkdown).equals('Some *markdown*');
        });
        it('converts LSP CompletionItem with plaintext documentation to AutoComplete Suggestion', () => {
            const completionItem = {
                insertText: 'insert',
                label: 'label',
                filterText: 'filter',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'detail',
                documentation: { value: 'Some plain text', kind: 'plaintext' },
            };
            const result = {};
            autocomplete_adapter_1.default.applyCompletionItemToSuggestion(completionItem, result);
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('Some plain text');
            chai_1.expect(result.descriptionMarkdown).equals(undefined);
        });
        it('converts LSP CompletionItem without insertText or filterText to AutoComplete Suggestion', () => {
            const completionItem = {
                label: 'label',
                kind: ls.CompletionItemKind.Keyword,
                detail: 'detail',
                documentation: 'A very useful keyword',
            };
            const result = {};
            autocomplete_adapter_1.default.applyCompletionItemToSuggestion(completionItem, result);
            chai_1.expect(result.text).equals('label');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('A very useful keyword');
            // expect(result.descriptionMarkdown).equals('A very useful keyword');
        });
    });
    describe('applyTextEditToSuggestion', () => {
        it('does not do anything if there is no textEdit', () => {
            const completionItem = { text: '' };
            autocomplete_adapter_1.default.applyTextEditToSuggestion(undefined, new atom_1.TextEditor(), completionItem);
            chai_1.expect(completionItem).deep.equals({ text: '' });
        });
        it('applies changes from TextEdit to replacementPrefix and text', () => {
            const textEdit = {
                range: {
                    start: { line: 1, character: 2 },
                    end: { line: 3, character: 4 },
                },
                newText: 'newText',
            };
            const editor = new atom_1.TextEditor();
            sinon.stub(editor, 'getTextInBufferRange').returns('replacementPrefix');
            const completionItem = { text: '' };
            autocomplete_adapter_1.default.applyTextEditToSuggestion(textEdit, editor, completionItem);
            chai_1.expect(completionItem.replacementPrefix).equals('replacementPrefix');
            chai_1.expect(completionItem.text).equals('newText');
            chai_1.expect(editor.getTextInBufferRange.calledOnce).equals(true);
            chai_1.expect(editor.getTextInBufferRange.getCall(0).args).deep.equals([new atom_1.Range(new atom_1.Point(1, 2), new atom_1.Point(3, 4))]);
        });
    });
    describe('completionKindToSuggestionType', () => {
        it('converts LSP CompletionKinds to AutoComplete SuggestionTypes', () => {
            const variable = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Variable);
            const constructor = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Constructor);
            const module = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Module);
            chai_1.expect(variable).equals('variable');
            chai_1.expect(constructor).equals('function');
            chai_1.expect(module).equals('module');
        });
        it('defaults to "value"', () => {
            const result = autocomplete_adapter_1.default.completionKindToSuggestionType(undefined);
            chai_1.expect(result).equals('value');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
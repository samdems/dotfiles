"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const outline_view_adapter_1 = require("../../lib/adapters/outline-view-adapter");
const ls = require("../../lib/languageclient");
const sinon = require("sinon");
const chai_1 = require("chai");
describe('OutlineViewAdapter', () => {
    const createLocation = (a, b, c, d) => ({
        uri: '',
        range: { start: { line: a, character: b }, end: { line: c, character: d } },
    });
    beforeEach(() => {
        global.sinon = sinon.sandbox.create();
    });
    afterEach(() => {
        global.sinon.restore();
    });
    describe('canAdapt', () => {
        it('returns true if documentSymbolProvider is supported', () => {
            const result = outline_view_adapter_1.default.canAdapt({ documentSymbolProvider: true });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if documentSymbolProvider not supported', () => {
            const result = outline_view_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('createOutlineTrees', () => {
        it('creates an empty array given an empty array', () => {
            const result = outline_view_adapter_1.default.createOutlineTrees([]);
            chai_1.expect(result).to.deep.equal([]);
        });
        it('creates a single converted root item from a single source item', () => {
            const sourceItem = { kind: ls.SymbolKind.Namespace, name: 'R', location: createLocation(5, 6, 7, 8) };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result).to.deep.equal([expected]);
        });
        it('creates an empty root container with a single source item when containerName missing', () => {
            const sourceItem = {
                kind: ls.SymbolKind.Class,
                name: 'Program',
                location: createLocation(1, 2, 3, 4),
            };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            sourceItem.containerName = 'missing';
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].representativeName).to.equal('missing');
            chai_1.expect(result[0].startPosition.row).to.equal(0);
            chai_1.expect(result[0].startPosition.column).to.equal(0);
            chai_1.expect(result[0].children).to.deep.equal([expected]);
        });
        // tslint:disable-next-line:max-line-length
        it('creates an empty root container with a single source item when containerName is missing and matches own name', () => {
            const sourceItem = {
                kind: ls.SymbolKind.Class,
                name: 'simple',
                location: createLocation(1, 2, 3, 4),
            };
            const expected = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            sourceItem.containerName = 'simple';
            const result = outline_view_adapter_1.default.createOutlineTrees([sourceItem]);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].representativeName).to.equal('simple');
            chai_1.expect(result[0].startPosition.row).to.equal(0);
            chai_1.expect(result[0].startPosition.column).to.equal(0);
            chai_1.expect(result[0].children).to.deep.equal([expected]);
        });
        it('creates a simple named hierarchy', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'java.com', location: createLocation(1, 0, 10, 0) },
                { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(2, 0, 7, 0), containerName: 'java.com' },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(4, 0, 5, 0), containerName: 'Program' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            chai_1.expect(result[0].children.length).to.equal(1);
            chai_1.expect(result[0].children[0].representativeName).to.equal('Program');
            chai_1.expect(result[0].children[0].children.length).to.equal(1);
            chai_1.expect(result[0].children[0].children[0].representativeName).to.equal('main');
        });
        it('retains duplicate named items', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) },
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(2);
            chai_1.expect(result[0].representativeName).to.equal('duplicate');
            chai_1.expect(result[1].representativeName).to.equal('duplicate');
        });
        it('disambiguates containerName based on range', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) },
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) },
                { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result[1].children.length).to.equal(1);
            chai_1.expect(result[1].children[0].representativeName).to.equal('main');
        });
        it("does not become it's own parent", () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 10, 0) },
                {
                    kind: ls.SymbolKind.Namespace,
                    name: 'duplicate',
                    location: createLocation(6, 0, 7, 0),
                    containerName: 'duplicate',
                },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            const outline = result[0];
            chai_1.expect(outline.endPosition).to.not.be.undefined;
            if (outline.endPosition) {
                chai_1.expect(outline.endPosition.row).to.equal(10);
                chai_1.expect(outline.children.length).to.equal(1);
                const outlineChild = outline.children[0];
                chai_1.expect(outlineChild.endPosition).to.not.be.undefined;
                if (outlineChild.endPosition) {
                    chai_1.expect(outlineChild.endPosition.row).to.equal(7);
                }
            }
        });
        it('parents to the innnermost named container', () => {
            const sourceItems = [
                { kind: ls.SymbolKind.Namespace, name: 'turtles', location: createLocation(1, 0, 10, 0) },
                {
                    kind: ls.SymbolKind.Namespace,
                    name: 'turtles',
                    location: createLocation(4, 0, 8, 0),
                    containerName: 'turtles',
                },
                { kind: ls.SymbolKind.Class, name: 'disc', location: createLocation(4, 0, 5, 0), containerName: 'turtles' },
            ];
            const result = outline_view_adapter_1.default.createOutlineTrees(sourceItems);
            chai_1.expect(result.length).to.equal(1);
            const outline = result[0];
            chai_1.expect(outline).to.not.be.undefined;
            if (outline) {
                chai_1.expect(outline.endPosition).to.not.be.undefined;
                if (outline.endPosition) {
                    chai_1.expect(outline.endPosition.row).to.equal(10);
                    chai_1.expect(outline.children.length).to.equal(1);
                    const outlineChild = outline.children[0];
                    chai_1.expect(outlineChild.endPosition).to.not.be.undefined;
                    if (outlineChild.endPosition) {
                        chai_1.expect(outlineChild.endPosition.row).to.equal(8);
                        chai_1.expect(outlineChild.children.length).to.equal(1);
                        const outlineGrandChild = outlineChild.children[0];
                        chai_1.expect(outlineGrandChild.endPosition).to.not.be.undefined;
                        if (outlineGrandChild.endPosition) {
                            chai_1.expect(outlineGrandChild.endPosition.row).to.equal(5);
                        }
                    }
                }
            }
        });
    });
    describe('symbolToOutline', () => {
        it('converts an individual item', () => {
            const sourceItem = { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(1, 2, 3, 4) };
            const result = outline_view_adapter_1.default.symbolToOutline(sourceItem);
            chai_1.expect(result.icon).to.equal('type-class');
            chai_1.expect(result.representativeName).to.equal('Program');
            chai_1.expect(result.children).to.deep.equal([]);
            chai_1.expect(result.tokenizedText).to.not.be.undefined;
            if (result.tokenizedText) {
                chai_1.expect(result.tokenizedText[0].kind).to.equal('type');
                chai_1.expect(result.tokenizedText[0].value).to.equal('Program');
                chai_1.expect(result.startPosition.row).to.equal(1);
                chai_1.expect(result.startPosition.column).to.equal(2);
                chai_1.expect(result.endPosition).to.not.be.undefined;
                if (result.endPosition) {
                    chai_1.expect(result.endPosition.row).to.equal(3);
                    chai_1.expect(result.endPosition.column).to.equal(4);
                }
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,
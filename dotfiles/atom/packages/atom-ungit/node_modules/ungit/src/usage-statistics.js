'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var config = require('./config');
var cache = require('./utils/cache');
var sysinfo = require('./sysinfo');
var getmac = require('getmac');
var winston = require('winston');
var keenio = require('keen.io');

var _PROJECT_ID = '5240b1d436bf5a753800000c';
var _WRITE_KEY = 'da0303fb058149813443f1321a139f23420323887b6a4940e82d47d02df451a4a132b938d2e8200a17914e06aa2767dc1a6fa0891db41942918db91a8daa61784d7af2495b934a05111605e4aa4e5c3d92b0b7f8be4d146e05586701894dc35d619443ae234dbc608a36de9ee97e0e1a';

var UsageStatistics = function () {
  function UsageStatistics() {
    _classCallCheck(this, UsageStatistics);

    if (!config.sendUsageStatistics) return;
    this.keen = keenio.configure({ projectId: _PROJECT_ID, writeKey: _WRITE_KEY });
    this.getDefaultDataKey = cache.registerFunc(function () {
      return sysinfo.getUserHash().then(function (hash) {
        return { version: config.ungitDevVersion, userHash: hash };
      });
    });
  }

  _createClass(UsageStatistics, [{
    key: '_mergeDataWithDefaultData',
    value: function _mergeDataWithDefaultData(data, callback) {
      cache.resolveFunc(this.getDefaultDataKey).then(function (defaultData) {
        data = data || {};
        for (var k in defaultData) {
          data[k] = defaultData[k];
        }callback(data);
      });
    }
  }, {
    key: 'addEvent',
    value: function addEvent(event, data, callback) {
      var _this = this;

      if (!config.sendUsageStatistics) return;
      this._mergeDataWithDefaultData(data, function (data) {
        winston.info('Sending to keen.io: event ' + JSON.stringify(data));
        _this.keen.addEvent(event, data, callback);
      });
    }
  }]);

  return UsageStatistics;
}();

module.exports = new UsageStatistics();

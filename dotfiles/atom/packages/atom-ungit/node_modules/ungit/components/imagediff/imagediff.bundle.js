(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var Promise = require('bluebird');

components.register('imagediff', function(args) {
  return new ImageDiffViewModel(args);
});

var ImageDiffViewModel = function(args) {
  var self = this;
  this.filename = args.filename;
  this.repoPath = args.repoPath;
  this.isNew = ko.observable(false);
  this.isRemoved = ko.observable(false);
  this.sha1 = args.sha1;
  this.state = ko.computed(function() {
    if (self.isNew()) return 'new';
    if (self.isRemoved()) return 'removed';
    return 'changed';
  });
  var gitDiffURL = ungit.config.rootPath + '/api/diff/image?path=' + encodeURIComponent(self.repoPath()) + '&filename=' + self.filename + '&version=';
  this.oldImageSrc = gitDiffURL + (self.sha1 ? self.sha1 + '^': 'HEAD');
  this.newImageSrc = gitDiffURL + (self.sha1 ? self.sha1: 'current');
  this.isShowingDiffs = args.isShowingDiffs;
}
ImageDiffViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('imagediff', this, {}, parentElement);
}
ImageDiffViewModel.prototype.invalidateDiff = function() {}
ImageDiffViewModel.prototype.newImageError = function() {
  this.isRemoved(true);
}
ImageDiffViewModel.prototype.oldImageError = function() {
  this.isNew(true);
}

},{"bluebird":undefined,"knockout":"knockout","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2ltYWdlZGlmZi9pbWFnZWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdpbWFnZWRpZmYnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgSW1hZ2VEaWZmVmlld01vZGVsKGFyZ3MpO1xufSk7XG5cbnZhciBJbWFnZURpZmZWaWV3TW9kZWwgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5maWxlbmFtZSA9IGFyZ3MuZmlsZW5hbWU7XG4gIHRoaXMucmVwb1BhdGggPSBhcmdzLnJlcG9QYXRoO1xuICB0aGlzLmlzTmV3ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuaXNSZW1vdmVkID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy5zdGF0ZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLmlzTmV3KCkpIHJldHVybiAnbmV3JztcbiAgICBpZiAoc2VsZi5pc1JlbW92ZWQoKSkgcmV0dXJuICdyZW1vdmVkJztcbiAgICByZXR1cm4gJ2NoYW5nZWQnO1xuICB9KTtcbiAgdmFyIGdpdERpZmZVUkwgPSB1bmdpdC5jb25maWcucm9vdFBhdGggKyAnL2FwaS9kaWZmL2ltYWdlP3BhdGg9JyArIGVuY29kZVVSSUNvbXBvbmVudChzZWxmLnJlcG9QYXRoKCkpICsgJyZmaWxlbmFtZT0nICsgc2VsZi5maWxlbmFtZSArICcmdmVyc2lvbj0nO1xuICB0aGlzLm9sZEltYWdlU3JjID0gZ2l0RGlmZlVSTCArIChzZWxmLnNoYTEgPyBzZWxmLnNoYTEgKyAnXic6ICdIRUFEJyk7XG4gIHRoaXMubmV3SW1hZ2VTcmMgPSBnaXREaWZmVVJMICsgKHNlbGYuc2hhMSA/IHNlbGYuc2hhMTogJ2N1cnJlbnQnKTtcbiAgdGhpcy5pc1Nob3dpbmdEaWZmcyA9IGFyZ3MuaXNTaG93aW5nRGlmZnM7XG59XG5JbWFnZURpZmZWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdpbWFnZWRpZmYnLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59XG5JbWFnZURpZmZWaWV3TW9kZWwucHJvdG90eXBlLmludmFsaWRhdGVEaWZmID0gZnVuY3Rpb24oKSB7fVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS5uZXdJbWFnZUVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNSZW1vdmVkKHRydWUpO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS5vbGRJbWFnZUVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNOZXcodHJ1ZSk7XG59XG4iXX0=

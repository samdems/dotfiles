(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var ko = require('knockout');
var CommitLineDiff = require('./commitlinediff.js').CommitLineDiff;
var components = require('ungit-components');

components.register('commitDiff', function(args) {
  return new CommitDiff(args);
});

var CommitDiff = function(args) {
  this.commitLineDiffs = ko.observableArray();
  this.sha1 = args.sha1;

  // parent components can provide their own buttons (e.g. staging component)
  this.showDiffButtons = ko.observable(!args.textDiffType);
  this.textDiffType = args.textDiffType = args.textDiffType || components.create('textdiff.type');
  this.wordWrap = args.wordWrap = args.wordWrap || components.create('textdiff.wordwrap');
  this.whiteSpace = args.whiteSpace = args.whiteSpace || components.create('textdiff.whitespace');

  args.fileLineDiffs.shift();  // remove first line that has "total"
  this.loadFileLineDiffs(args);
};

CommitDiff.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commitdiff', this, {}, parentElement);
};

CommitDiff.prototype.loadFileLineDiffs = function(args) {
  var tempCommitLineDiffs = [];
  var lineDiffLength = this.commitLineDiffs().length;

  args.fileLineDiffs.slice(lineDiffLength === 0 ? 0 : lineDiffLength + 1, this.maxNumberOfFilesShown).forEach(function(fileLineDiff) {
    tempCommitLineDiffs.push(new CommitLineDiff(args, fileLineDiff));
  });

  this.commitLineDiffs(this.commitLineDiffs().concat(tempCommitLineDiffs));
}

},{"./commitlinediff.js":2,"knockout":"knockout","ungit-components":"ungit-components"}],2:[function(require,module,exports){
var ko = require('knockout');
var components = require('ungit-components');
var inherits = require('util').inherits;
var programEvents = require('ungit-program-events');

var CommitLineDiff = function(args, fileLineDiff) {
  this.added = ko.observable(fileLineDiff[0]);
  this.removed = ko.observable(fileLineDiff[1]);
  this.fileName = ko.observable(fileLineDiff[2]);
  this.fileType = fileLineDiff[3];
  this.isShowingDiffs = ko.observable(false);
  this.repoPath = args.repoPath;
  this.server = args.server;
  this.sha1 = args.sha1;
  this.textDiffType = args.textDiffType;
  this.wordWrap = args.wordWrap;
  this.whiteSpace = args.whiteSpace;
  this.specificDiff = ko.observable(this.getSpecificDiff());
};
exports.CommitLineDiff = CommitLineDiff;

CommitLineDiff.prototype.getSpecificDiff = function() {
  return components.create(this.fileType + 'diff', {
    filename: this.fileName(),
    repoPath: this.repoPath,
    server: this.server,
    sha1: this.sha1,
    textDiffType: this.textDiffType,
    isShowingDiffs: this.isShowingDiffs,
    whiteSpace: this.whiteSpace,
    wordWrap: this.wordWrap
  });
}

CommitLineDiff.prototype.fileNameClick = function() {
  this.isShowingDiffs(!this.isShowingDiffs());
  programEvents.dispatch({ event: 'graph-render' });
};

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events","util":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdGRpZmYvY29tbWl0ZGlmZi5qcyIsImNvbXBvbmVudHMvY29tbWl0ZGlmZi9jb21taXRsaW5lZGlmZi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJ2YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIENvbW1pdExpbmVEaWZmID0gcmVxdWlyZSgnLi9jb21taXRsaW5lZGlmZi5qcycpLkNvbW1pdExpbmVEaWZmO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ2NvbW1pdERpZmYnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgQ29tbWl0RGlmZihhcmdzKTtcbn0pO1xuXG52YXIgQ29tbWl0RGlmZiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdGhpcy5jb21taXRMaW5lRGlmZnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcbiAgdGhpcy5zaGExID0gYXJncy5zaGExO1xuXG4gIC8vIHBhcmVudCBjb21wb25lbnRzIGNhbiBwcm92aWRlIHRoZWlyIG93biBidXR0b25zIChlLmcuIHN0YWdpbmcgY29tcG9uZW50KVxuICB0aGlzLnNob3dEaWZmQnV0dG9ucyA9IGtvLm9ic2VydmFibGUoIWFyZ3MudGV4dERpZmZUeXBlKTtcbiAgdGhpcy50ZXh0RGlmZlR5cGUgPSBhcmdzLnRleHREaWZmVHlwZSA9IGFyZ3MudGV4dERpZmZUeXBlIHx8IGNvbXBvbmVudHMuY3JlYXRlKCd0ZXh0ZGlmZi50eXBlJyk7XG4gIHRoaXMud29yZFdyYXAgPSBhcmdzLndvcmRXcmFwID0gYXJncy53b3JkV3JhcCB8fCBjb21wb25lbnRzLmNyZWF0ZSgndGV4dGRpZmYud29yZHdyYXAnKTtcbiAgdGhpcy53aGl0ZVNwYWNlID0gYXJncy53aGl0ZVNwYWNlID0gYXJncy53aGl0ZVNwYWNlIHx8IGNvbXBvbmVudHMuY3JlYXRlKCd0ZXh0ZGlmZi53aGl0ZXNwYWNlJyk7XG5cbiAgYXJncy5maWxlTGluZURpZmZzLnNoaWZ0KCk7ICAvLyByZW1vdmUgZmlyc3QgbGluZSB0aGF0IGhhcyBcInRvdGFsXCJcbiAgdGhpcy5sb2FkRmlsZUxpbmVEaWZmcyhhcmdzKTtcbn07XG5cbkNvbW1pdERpZmYucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdjb21taXRkaWZmJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufTtcblxuQ29tbWl0RGlmZi5wcm90b3R5cGUubG9hZEZpbGVMaW5lRGlmZnMgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciB0ZW1wQ29tbWl0TGluZURpZmZzID0gW107XG4gIHZhciBsaW5lRGlmZkxlbmd0aCA9IHRoaXMuY29tbWl0TGluZURpZmZzKCkubGVuZ3RoO1xuXG4gIGFyZ3MuZmlsZUxpbmVEaWZmcy5zbGljZShsaW5lRGlmZkxlbmd0aCA9PT0gMCA/IDAgOiBsaW5lRGlmZkxlbmd0aCArIDEsIHRoaXMubWF4TnVtYmVyT2ZGaWxlc1Nob3duKS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGVMaW5lRGlmZikge1xuICAgIHRlbXBDb21taXRMaW5lRGlmZnMucHVzaChuZXcgQ29tbWl0TGluZURpZmYoYXJncywgZmlsZUxpbmVEaWZmKSk7XG4gIH0pO1xuXG4gIHRoaXMuY29tbWl0TGluZURpZmZzKHRoaXMuY29tbWl0TGluZURpZmZzKCkuY29uY2F0KHRlbXBDb21taXRMaW5lRGlmZnMpKTtcbn1cbiIsInZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cztcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxudmFyIENvbW1pdExpbmVEaWZmID0gZnVuY3Rpb24oYXJncywgZmlsZUxpbmVEaWZmKSB7XG4gIHRoaXMuYWRkZWQgPSBrby5vYnNlcnZhYmxlKGZpbGVMaW5lRGlmZlswXSk7XG4gIHRoaXMucmVtb3ZlZCA9IGtvLm9ic2VydmFibGUoZmlsZUxpbmVEaWZmWzFdKTtcbiAgdGhpcy5maWxlTmFtZSA9IGtvLm9ic2VydmFibGUoZmlsZUxpbmVEaWZmWzJdKTtcbiAgdGhpcy5maWxlVHlwZSA9IGZpbGVMaW5lRGlmZlszXTtcbiAgdGhpcy5pc1Nob3dpbmdEaWZmcyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLnJlcG9QYXRoID0gYXJncy5yZXBvUGF0aDtcbiAgdGhpcy5zZXJ2ZXIgPSBhcmdzLnNlcnZlcjtcbiAgdGhpcy5zaGExID0gYXJncy5zaGExO1xuICB0aGlzLnRleHREaWZmVHlwZSA9IGFyZ3MudGV4dERpZmZUeXBlO1xuICB0aGlzLndvcmRXcmFwID0gYXJncy53b3JkV3JhcDtcbiAgdGhpcy53aGl0ZVNwYWNlID0gYXJncy53aGl0ZVNwYWNlO1xuICB0aGlzLnNwZWNpZmljRGlmZiA9IGtvLm9ic2VydmFibGUodGhpcy5nZXRTcGVjaWZpY0RpZmYoKSk7XG59O1xuZXhwb3J0cy5Db21taXRMaW5lRGlmZiA9IENvbW1pdExpbmVEaWZmO1xuXG5Db21taXRMaW5lRGlmZi5wcm90b3R5cGUuZ2V0U3BlY2lmaWNEaWZmID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb21wb25lbnRzLmNyZWF0ZSh0aGlzLmZpbGVUeXBlICsgJ2RpZmYnLCB7XG4gICAgZmlsZW5hbWU6IHRoaXMuZmlsZU5hbWUoKSxcbiAgICByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCxcbiAgICBzZXJ2ZXI6IHRoaXMuc2VydmVyLFxuICAgIHNoYTE6IHRoaXMuc2hhMSxcbiAgICB0ZXh0RGlmZlR5cGU6IHRoaXMudGV4dERpZmZUeXBlLFxuICAgIGlzU2hvd2luZ0RpZmZzOiB0aGlzLmlzU2hvd2luZ0RpZmZzLFxuICAgIHdoaXRlU3BhY2U6IHRoaXMud2hpdGVTcGFjZSxcbiAgICB3b3JkV3JhcDogdGhpcy53b3JkV3JhcFxuICB9KTtcbn1cblxuQ29tbWl0TGluZURpZmYucHJvdG90eXBlLmZpbGVOYW1lQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc1Nob3dpbmdEaWZmcyghdGhpcy5pc1Nob3dpbmdEaWZmcygpKTtcbiAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnZ3JhcGgtcmVuZGVyJyB9KTtcbn07XG4iXX0=

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var signals = require('signals');

components.register('login', function(args) {
  return new LoginViewModel(args.server);
});




var LoginViewModel = function(server) {
  var self = this;
  this.server = server;
  this.loggedIn = new signals.Signal();
  this.status = ko.observable('loading');
  this.username = ko.observable();
  this.password = ko.observable();
  this.loginError = ko.observable();
  this.server.getPromise('/loggedin')
    .then(function(status) {
      if (status.loggedIn) {
        self.loggedIn.dispatch();
        self.status('loggedIn');
      } else {
        self.status('login');
      }
    }).catch(function(err) { });
}
LoginViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('login', this, {}, parentElement);
}
LoginViewModel.prototype.login = function() {
  var self = this;
  this.server.postPromise('/login', { username: this.username(), password: this.password() }).then(function(res) {
    self.loggedIn.dispatch();
    self.status('loggedIn');
  }).catch(function(err) {
    if (err.res.body.error) {
      self.loginError(err.res.body.error);
    } else {
      self.server.unhandledRejection(err);
    }
  });
}

},{"knockout":"knockout","signals":undefined,"ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2xvZ2luL2xvZ2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIHNpZ25hbHMgPSByZXF1aXJlKCdzaWduYWxzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ2xvZ2luJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IExvZ2luVmlld01vZGVsKGFyZ3Muc2VydmVyKTtcbn0pO1xuXG5cblxuXG52YXIgTG9naW5WaWV3TW9kZWwgPSBmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5sb2dnZWRJbiA9IG5ldyBzaWduYWxzLlNpZ25hbCgpO1xuICB0aGlzLnN0YXR1cyA9IGtvLm9ic2VydmFibGUoJ2xvYWRpbmcnKTtcbiAgdGhpcy51c2VybmFtZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5wYXNzd29yZCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5sb2dpbkVycm9yID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLnNlcnZlci5nZXRQcm9taXNlKCcvbG9nZ2VkaW4nKVxuICAgIC50aGVuKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgaWYgKHN0YXR1cy5sb2dnZWRJbikge1xuICAgICAgICBzZWxmLmxvZ2dlZEluLmRpc3BhdGNoKCk7XG4gICAgICAgIHNlbGYuc3RhdHVzKCdsb2dnZWRJbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5zdGF0dXMoJ2xvZ2luJyk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7IH0pO1xufVxuTG9naW5WaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdsb2dpbicsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cbkxvZ2luVmlld01vZGVsLnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvbG9naW4nLCB7IHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lKCksIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkKCkgfSkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICBzZWxmLmxvZ2dlZEluLmRpc3BhdGNoKCk7XG4gICAgc2VsZi5zdGF0dXMoJ2xvZ2dlZEluJyk7XG4gIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgIGlmIChlcnIucmVzLmJvZHkuZXJyb3IpIHtcbiAgICAgIHNlbGYubG9naW5FcnJvcihlcnIucmVzLmJvZHkuZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnNlcnZlci51bmhhbmRsZWRSZWplY3Rpb24oZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuIl19

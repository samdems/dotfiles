(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('submodules', function(args) {
  return new SubmodulesViewModel(args.server, args.repoPath);
});

function SubmodulesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.submodules = ko.observableArray();
  this.isUpdating = false;
}

SubmodulesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'submodule-fetch') this.fetchSubmodules();
}

SubmodulesViewModel.prototype.updateNode = function(parentElement) {
  this.fetchSubmodules().then(function(submoduleViewModel) {
    ko.renderTemplate('submodules', submoduleViewModel, {}, parentElement);
  });
}

SubmodulesViewModel.prototype.fetchSubmodules = function() {
  var self = this;
  return this.server.getPromise('/submodules', { path: this.repoPath() })
    .then(function(submodules) {
      self.submodules(submodules && Array.isArray(submodules) ? submodules : []);
      return self;
    }).catch((e) => this.server.unhandledRejection(e));
}

SubmodulesViewModel.prototype.updateSubmodules = function() {
  if (this.isUpdating) return;
  this.isUpdating = true;
  return this.server.postPromise('/submodules/update', { path: this.repoPath() })
    .catch((e) => this.server.unhandledRejection(e))
    .finally(() => { this.isUpdating = false; });
}

SubmodulesViewModel.prototype.showAddSubmoduleDialog = function() {
  components.create('addsubmoduledialog')
    .show()
    .closeThen((diag) => {
      if (!diag.isSubmitted()) return;
      this.isUpdating = true;
      this.server.postPromise('/submodules/add', { path: this.repoPath(), submoduleUrl: diag.url(), submodulePath: diag.path() })
        .then(() => { programEvents.dispatch({ event: 'submodule-fetch' }); })
        .catch((e) => this.server.unhandledRejection(e))
        .finally(() => { this.isUpdating = false; });
    });
}

SubmodulesViewModel.prototype.submoduleLinkClick = function(submodule) {
  window.location.href = submodule.url;
}

SubmodulesViewModel.prototype.submodulePathClick = function(submodule) {
  window.location.href = document.URL + ungit.config.fileSeparator + submodule.path;
}

SubmodulesViewModel.prototype.submoduleRemove = function(submodule) {
  var self = this;
  components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + submodule.name + ' submodule cannot be undone with ungit.'})
    .show()
    .closeThen(function(diag) {
      if (!diag.result()) return;
      self.server.delPromise('/submodules', { path: self.repoPath(), submodulePath: submodule.path, submoduleName: submodule.name })
        .then(() => { programEvents.dispatch({ event: 'submodule-fetch' }); })
        .catch((e) => this.server.unhandledRejection(e));
    });
}

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3N1Ym1vZHVsZXMvc3VibW9kdWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3Rlcignc3VibW9kdWxlcycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBTdWJtb2R1bGVzVmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnJlcG9QYXRoKTtcbn0pO1xuXG5mdW5jdGlvbiBTdWJtb2R1bGVzVmlld01vZGVsKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnN1Ym1vZHVsZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcbiAgdGhpcy5pc1VwZGF0aW5nID0gZmFsc2U7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdzdWJtb2R1bGUtZmV0Y2gnKSB0aGlzLmZldGNoU3VibW9kdWxlcygpO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICB0aGlzLmZldGNoU3VibW9kdWxlcygpLnRoZW4oZnVuY3Rpb24oc3VibW9kdWxlVmlld01vZGVsKSB7XG4gICAga28ucmVuZGVyVGVtcGxhdGUoJ3N1Ym1vZHVsZXMnLCBzdWJtb2R1bGVWaWV3TW9kZWwsIHt9LCBwYXJlbnRFbGVtZW50KTtcbiAgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLmZldGNoU3VibW9kdWxlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLnNlcnZlci5nZXRQcm9taXNlKCcvc3VibW9kdWxlcycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oc3VibW9kdWxlcykge1xuICAgICAgc2VsZi5zdWJtb2R1bGVzKHN1Ym1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShzdWJtb2R1bGVzKSA/IHN1Ym1vZHVsZXMgOiBbXSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5zZXJ2ZXIudW5oYW5kbGVkUmVqZWN0aW9uKGUpKTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlU3VibW9kdWxlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pc1VwZGF0aW5nKSByZXR1cm47XG4gIHRoaXMuaXNVcGRhdGluZyA9IHRydWU7XG4gIHJldHVybiB0aGlzLnNlcnZlci5wb3N0UHJvbWlzZSgnL3N1Ym1vZHVsZXMvdXBkYXRlJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSlcbiAgICAuY2F0Y2goKGUpID0+IHRoaXMuc2VydmVyLnVuaGFuZGxlZFJlamVjdGlvbihlKSlcbiAgICAuZmluYWxseSgoKSA9PiB7IHRoaXMuaXNVcGRhdGluZyA9IGZhbHNlOyB9KTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd0FkZFN1Ym1vZHVsZURpYWxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb21wb25lbnRzLmNyZWF0ZSgnYWRkc3VibW9kdWxlZGlhbG9nJylcbiAgICAuc2hvdygpXG4gICAgLmNsb3NlVGhlbigoZGlhZykgPT4ge1xuICAgICAgaWYgKCFkaWFnLmlzU3VibWl0dGVkKCkpIHJldHVybjtcbiAgICAgIHRoaXMuaXNVcGRhdGluZyA9IHRydWU7XG4gICAgICB0aGlzLnNlcnZlci5wb3N0UHJvbWlzZSgnL3N1Ym1vZHVsZXMvYWRkJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCksIHN1Ym1vZHVsZVVybDogZGlhZy51cmwoKSwgc3VibW9kdWxlUGF0aDogZGlhZy5wYXRoKCkgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4geyBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICdzdWJtb2R1bGUtZmV0Y2gnIH0pOyB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHRoaXMuc2VydmVyLnVuaGFuZGxlZFJlamVjdGlvbihlKSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4geyB0aGlzLmlzVXBkYXRpbmcgPSBmYWxzZTsgfSk7XG4gICAgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnN1Ym1vZHVsZUxpbmtDbGljayA9IGZ1bmN0aW9uKHN1Ym1vZHVsZSkge1xuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHN1Ym1vZHVsZS51cmw7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnN1Ym1vZHVsZVBhdGhDbGljayA9IGZ1bmN0aW9uKHN1Ym1vZHVsZSkge1xuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRvY3VtZW50LlVSTCArIHVuZ2l0LmNvbmZpZy5maWxlU2VwYXJhdG9yICsgc3VibW9kdWxlLnBhdGg7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnN1Ym1vZHVsZVJlbW92ZSA9IGZ1bmN0aW9uKHN1Ym1vZHVsZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNvbXBvbmVudHMuY3JlYXRlKCd5ZXNub2RpYWxvZycsIHsgdGl0bGU6ICdBcmUgeW91IHN1cmU/JywgZGV0YWlsczogJ0RlbGV0aW5nICcgKyBzdWJtb2R1bGUubmFtZSArICcgc3VibW9kdWxlIGNhbm5vdCBiZSB1bmRvbmUgd2l0aCB1bmdpdC4nfSlcbiAgICAuc2hvdygpXG4gICAgLmNsb3NlVGhlbihmdW5jdGlvbihkaWFnKSB7XG4gICAgICBpZiAoIWRpYWcucmVzdWx0KCkpIHJldHVybjtcbiAgICAgIHNlbGYuc2VydmVyLmRlbFByb21pc2UoJy9zdWJtb2R1bGVzJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHN1Ym1vZHVsZVBhdGg6IHN1Ym1vZHVsZS5wYXRoLCBzdWJtb2R1bGVOYW1lOiBzdWJtb2R1bGUubmFtZSB9KVxuICAgICAgICAudGhlbigoKSA9PiB7IHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3N1Ym1vZHVsZS1mZXRjaCcgfSk7IH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5zZXJ2ZXIudW5oYW5kbGVkUmVqZWN0aW9uKGUpKTtcbiAgICB9KTtcbn1cbiJdfQ==

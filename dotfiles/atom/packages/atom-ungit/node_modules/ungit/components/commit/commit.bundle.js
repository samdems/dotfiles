(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var navigation = require('ungit-navigation');
var programEvents = require('ungit-program-events');
var md5 = require('blueimp-md5');
var moment = require('moment');

components.register('commit', function(args) {
  return new CommitViewModel(args);
});

function CommitViewModel(gitNode) {
  var self = this;
  this.repoPath = gitNode.graph.repoPath;
  this.sha1 = gitNode.sha1;
  this.server = gitNode.graph.server;
  this.highlighted = gitNode.highlighted;
  this.nodeIsMousehover = gitNode.nodeIsMousehover;
  this.selected = gitNode.selected;
  this.pgpVerifiedString = gitNode.pgpVerifiedString;
  this.element = ko.observable();
  this.commitTime = ko.observable();
  this.authorTime = ko.observable();
  this.message = ko.observable();
  this.title = ko.observable();
  this.body = ko.observable();
  this.authorDate = ko.observable(0);
  this.authorDateFromNow = ko.observable();
  this.authorName = ko.observable();
  this.authorEmail = ko.observable();
  this.fileLineDiffs = ko.observable();
  this.numberOfAddedLines = ko.observable();
  this.numberOfRemovedLines = ko.observable();
  this.authorGravatar = ko.computed(function() {
    return md5((self.authorEmail() || "").trim().toLowerCase());
  });

  this.showCommitDiff = ko.computed(function() {
    return self.fileLineDiffs() && self.fileLineDiffs().length > 0;
  });

  this.diffStyle = ko.computed(function() {
    var marginLeft = Math.min((gitNode.branchOrder() * 70), 450) * -1;
    if (self.selected() && self.element()) return { "margin-left": marginLeft + 'px', width: (window.innerWidth - 220) + 'px' };
    else return {};
  });
}
CommitViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commit', this, {}, parentElement);
}
CommitViewModel.prototype.setData = function(args) {
  this.commitTime(moment(new Date(args.commitDate)));
  this.authorTime(moment(new Date(args.authorDate)));
  var message = args.message.split('\n');
  this.message(args.message);
  this.title(message[0]);
  this.body(message.slice((message[1] ? 1 : 2)).join('\n'));
  this.authorDate(moment(new Date(args.authorDate)));
  this.authorDateFromNow(this.authorDate().fromNow());
  this.authorName(args.authorName);
  this.authorEmail(args.authorEmail);
  this.numberOfAddedLines(args.fileLineDiffs.length > 0 ? args.fileLineDiffs[0][0] : 0);
  this.numberOfRemovedLines(args.fileLineDiffs.length > 0 ? args.fileLineDiffs[0][1] : 0);
  this.fileLineDiffs(args.fileLineDiffs);
  this.isInited = true;
  this.commitDiff = ko.observable(components.create('commitDiff', {
    fileLineDiffs: this.fileLineDiffs(),
    sha1: this.sha1,
    repoPath: this.repoPath,
    server: this.server
  }));
}
CommitViewModel.prototype.updateLastAuthorDateFromNow = function(deltaT) {
  this.lastUpdatedAuthorDateFromNow = this.lastUpdatedAuthorDateFromNow || 0;
  this.lastUpdatedAuthorDateFromNow += deltaT;
  if(this.lastUpdatedAuthorDateFromNow > 60 * 1000) {
    this.lastUpdatedAuthorDateFromNow = 0;
    this.authorDateFromNow(this.authorDate().fromNow());
  }
}
CommitViewModel.prototype.updateAnimationFrame = function(deltaT) {
  this.updateLastAuthorDateFromNow(deltaT);
}
CommitViewModel.prototype.stopClickPropagation = function(data, event) {
  event.stopImmediatePropagation();
}

},{"blueimp-md5":"blueimp-md5","knockout":"knockout","moment":"moment","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdC9jb21taXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIG5hdmlnYXRpb24gPSByZXF1aXJlKCd1bmdpdC1uYXZpZ2F0aW9uJyk7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG52YXIgbWQ1ID0gcmVxdWlyZSgnYmx1ZWltcC1tZDUnKTtcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignY29tbWl0JywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IENvbW1pdFZpZXdNb2RlbChhcmdzKTtcbn0pO1xuXG5mdW5jdGlvbiBDb21taXRWaWV3TW9kZWwoZ2l0Tm9kZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucmVwb1BhdGggPSBnaXROb2RlLmdyYXBoLnJlcG9QYXRoO1xuICB0aGlzLnNoYTEgPSBnaXROb2RlLnNoYTE7XG4gIHRoaXMuc2VydmVyID0gZ2l0Tm9kZS5ncmFwaC5zZXJ2ZXI7XG4gIHRoaXMuaGlnaGxpZ2h0ZWQgPSBnaXROb2RlLmhpZ2hsaWdodGVkO1xuICB0aGlzLm5vZGVJc01vdXNlaG92ZXIgPSBnaXROb2RlLm5vZGVJc01vdXNlaG92ZXI7XG4gIHRoaXMuc2VsZWN0ZWQgPSBnaXROb2RlLnNlbGVjdGVkO1xuICB0aGlzLnBncFZlcmlmaWVkU3RyaW5nID0gZ2l0Tm9kZS5wZ3BWZXJpZmllZFN0cmluZztcbiAgdGhpcy5lbGVtZW50ID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmNvbW1pdFRpbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuYXV0aG9yVGltZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5tZXNzYWdlID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLnRpdGxlID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmJvZHkgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuYXV0aG9yRGF0ZSA9IGtvLm9ic2VydmFibGUoMCk7XG4gIHRoaXMuYXV0aG9yRGF0ZUZyb21Ob3cgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuYXV0aG9yTmFtZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5hdXRob3JFbWFpbCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5maWxlTGluZURpZmZzID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLm51bWJlck9mQWRkZWRMaW5lcyA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5udW1iZXJPZlJlbW92ZWRMaW5lcyA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5hdXRob3JHcmF2YXRhciA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtZDUoKHNlbGYuYXV0aG9yRW1haWwoKSB8fCBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKSk7XG4gIH0pO1xuXG4gIHRoaXMuc2hvd0NvbW1pdERpZmYgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5maWxlTGluZURpZmZzKCkgJiYgc2VsZi5maWxlTGluZURpZmZzKCkubGVuZ3RoID4gMDtcbiAgfSk7XG5cbiAgdGhpcy5kaWZmU3R5bGUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IE1hdGgubWluKChnaXROb2RlLmJyYW5jaE9yZGVyKCkgKiA3MCksIDQ1MCkgKiAtMTtcbiAgICBpZiAoc2VsZi5zZWxlY3RlZCgpICYmIHNlbGYuZWxlbWVudCgpKSByZXR1cm4geyBcIm1hcmdpbi1sZWZ0XCI6IG1hcmdpbkxlZnQgKyAncHgnLCB3aWR0aDogKHdpbmRvdy5pbm5lcldpZHRoIC0gMjIwKSArICdweCcgfTtcbiAgICBlbHNlIHJldHVybiB7fTtcbiAgfSk7XG59XG5Db21taXRWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdjb21taXQnLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59XG5Db21taXRWaWV3TW9kZWwucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHRoaXMuY29tbWl0VGltZShtb21lbnQobmV3IERhdGUoYXJncy5jb21taXREYXRlKSkpO1xuICB0aGlzLmF1dGhvclRpbWUobW9tZW50KG5ldyBEYXRlKGFyZ3MuYXV0aG9yRGF0ZSkpKTtcbiAgdmFyIG1lc3NhZ2UgPSBhcmdzLm1lc3NhZ2Uuc3BsaXQoJ1xcbicpO1xuICB0aGlzLm1lc3NhZ2UoYXJncy5tZXNzYWdlKTtcbiAgdGhpcy50aXRsZShtZXNzYWdlWzBdKTtcbiAgdGhpcy5ib2R5KG1lc3NhZ2Uuc2xpY2UoKG1lc3NhZ2VbMV0gPyAxIDogMikpLmpvaW4oJ1xcbicpKTtcbiAgdGhpcy5hdXRob3JEYXRlKG1vbWVudChuZXcgRGF0ZShhcmdzLmF1dGhvckRhdGUpKSk7XG4gIHRoaXMuYXV0aG9yRGF0ZUZyb21Ob3codGhpcy5hdXRob3JEYXRlKCkuZnJvbU5vdygpKTtcbiAgdGhpcy5hdXRob3JOYW1lKGFyZ3MuYXV0aG9yTmFtZSk7XG4gIHRoaXMuYXV0aG9yRW1haWwoYXJncy5hdXRob3JFbWFpbCk7XG4gIHRoaXMubnVtYmVyT2ZBZGRlZExpbmVzKGFyZ3MuZmlsZUxpbmVEaWZmcy5sZW5ndGggPiAwID8gYXJncy5maWxlTGluZURpZmZzWzBdWzBdIDogMCk7XG4gIHRoaXMubnVtYmVyT2ZSZW1vdmVkTGluZXMoYXJncy5maWxlTGluZURpZmZzLmxlbmd0aCA+IDAgPyBhcmdzLmZpbGVMaW5lRGlmZnNbMF1bMV0gOiAwKTtcbiAgdGhpcy5maWxlTGluZURpZmZzKGFyZ3MuZmlsZUxpbmVEaWZmcyk7XG4gIHRoaXMuaXNJbml0ZWQgPSB0cnVlO1xuICB0aGlzLmNvbW1pdERpZmYgPSBrby5vYnNlcnZhYmxlKGNvbXBvbmVudHMuY3JlYXRlKCdjb21taXREaWZmJywge1xuICAgIGZpbGVMaW5lRGlmZnM6IHRoaXMuZmlsZUxpbmVEaWZmcygpLFxuICAgIHNoYTE6IHRoaXMuc2hhMSxcbiAgICByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCxcbiAgICBzZXJ2ZXI6IHRoaXMuc2VydmVyXG4gIH0pKTtcbn1cbkNvbW1pdFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTGFzdEF1dGhvckRhdGVGcm9tTm93ID0gZnVuY3Rpb24oZGVsdGFUKSB7XG4gIHRoaXMubGFzdFVwZGF0ZWRBdXRob3JEYXRlRnJvbU5vdyA9IHRoaXMubGFzdFVwZGF0ZWRBdXRob3JEYXRlRnJvbU5vdyB8fCAwO1xuICB0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgKz0gZGVsdGFUO1xuICBpZih0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgPiA2MCAqIDEwMDApIHtcbiAgICB0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgPSAwO1xuICAgIHRoaXMuYXV0aG9yRGF0ZUZyb21Ob3codGhpcy5hdXRob3JEYXRlKCkuZnJvbU5vdygpKTtcbiAgfVxufVxuQ29tbWl0Vmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGRlbHRhVCkge1xuICB0aGlzLnVwZGF0ZUxhc3RBdXRob3JEYXRlRnJvbU5vdyhkZWx0YVQpO1xufVxuQ29tbWl0Vmlld01vZGVsLnByb3RvdHlwZS5zdG9wQ2xpY2tQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIl19

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');
var navigation = require('ungit-navigation');

components.register('gitErrors', function(args) {
  return new GitErrorsViewModel(args.server, args.repoPath);
});

var GitErrorsViewModel = function(server, repoPath) {
  var self = this;
  this.server = server;
  this.repoPath = repoPath;
  this.gitErrors = ko.observableArray();
}
GitErrorsViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('gitErrors', this, {}, parentElement);
}
GitErrorsViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'git-error') this._handleGitError(event);
}
GitErrorsViewModel.prototype._handleGitError = function(event) {
  if (event.data.repoPath != this.repoPath()) return;
  this.gitErrors.push(new GitErrorViewModel(this, this.server, event.data));
}

function GitErrorViewModel(gitErrors, server, data) {
  var self = this;
  this.gitErrors = gitErrors;
  this.server = server;
  this.tip = data.tip;
  this.isWarning = data.isWarning || false;
  this.command = data.command;
  this.error = data.error;
  this.stdout = data.stdout;
  this.stderr = data.stderr;
  this.showEnableBugtracking = ko.observable(false);
  this.bugReportWasSent = ungit.config.bugtracking;

  if (!data.shouldSkipReport && !ungit.config.bugtracking) {
    this.server.getPromise('/userconfig')
      .then(function(userConfig) { self.showEnableBugtracking(!userConfig.bugtracking); });
  }
}
GitErrorViewModel.prototype.dismiss = function() {
  this.gitErrors.gitErrors.remove(this);
}
GitErrorViewModel.prototype.enableBugtrackingAndStatistics = function() {
  var self = this;
  this.server.getPromise('/userconfig')
    .then(function(userConfig) {
      userConfig.bugtracking = true;
      userConfig.sendUsageStatistics = true;
      return self.server.postPromise('/userconfig', userConfig)
        .then(function() { self.showEnableBugtracking(false); })
    });
}

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2dpdEVycm9ycy9naXRFcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG52YXIgbmF2aWdhdGlvbiA9IHJlcXVpcmUoJ3VuZ2l0LW5hdmlnYXRpb24nKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignZ2l0RXJyb3JzJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IEdpdEVycm9yc1ZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5yZXBvUGF0aCk7XG59KTtcblxudmFyIEdpdEVycm9yc1ZpZXdNb2RlbCA9IGZ1bmN0aW9uKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5yZXBvUGF0aCA9IHJlcG9QYXRoO1xuICB0aGlzLmdpdEVycm9ycyA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xufVxuR2l0RXJyb3JzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnZ2l0RXJyb3JzJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuR2l0RXJyb3JzVmlld01vZGVsLnByb3RvdHlwZS5vblByb2dyYW1FdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5ldmVudCA9PSAnZ2l0LWVycm9yJykgdGhpcy5faGFuZGxlR2l0RXJyb3IoZXZlbnQpO1xufVxuR2l0RXJyb3JzVmlld01vZGVsLnByb3RvdHlwZS5faGFuZGxlR2l0RXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQuZGF0YS5yZXBvUGF0aCAhPSB0aGlzLnJlcG9QYXRoKCkpIHJldHVybjtcbiAgdGhpcy5naXRFcnJvcnMucHVzaChuZXcgR2l0RXJyb3JWaWV3TW9kZWwodGhpcywgdGhpcy5zZXJ2ZXIsIGV2ZW50LmRhdGEpKTtcbn1cblxuZnVuY3Rpb24gR2l0RXJyb3JWaWV3TW9kZWwoZ2l0RXJyb3JzLCBzZXJ2ZXIsIGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmdpdEVycm9ycyA9IGdpdEVycm9ycztcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMudGlwID0gZGF0YS50aXA7XG4gIHRoaXMuaXNXYXJuaW5nID0gZGF0YS5pc1dhcm5pbmcgfHwgZmFsc2U7XG4gIHRoaXMuY29tbWFuZCA9IGRhdGEuY29tbWFuZDtcbiAgdGhpcy5lcnJvciA9IGRhdGEuZXJyb3I7XG4gIHRoaXMuc3Rkb3V0ID0gZGF0YS5zdGRvdXQ7XG4gIHRoaXMuc3RkZXJyID0gZGF0YS5zdGRlcnI7XG4gIHRoaXMuc2hvd0VuYWJsZUJ1Z3RyYWNraW5nID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuYnVnUmVwb3J0V2FzU2VudCA9IHVuZ2l0LmNvbmZpZy5idWd0cmFja2luZztcblxuICBpZiAoIWRhdGEuc2hvdWxkU2tpcFJlcG9ydCAmJiAhdW5naXQuY29uZmlnLmJ1Z3RyYWNraW5nKSB7XG4gICAgdGhpcy5zZXJ2ZXIuZ2V0UHJvbWlzZSgnL3VzZXJjb25maWcnKVxuICAgICAgLnRoZW4oZnVuY3Rpb24odXNlckNvbmZpZykgeyBzZWxmLnNob3dFbmFibGVCdWd0cmFja2luZyghdXNlckNvbmZpZy5idWd0cmFja2luZyk7IH0pO1xuICB9XG59XG5HaXRFcnJvclZpZXdNb2RlbC5wcm90b3R5cGUuZGlzbWlzcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmdpdEVycm9ycy5naXRFcnJvcnMucmVtb3ZlKHRoaXMpO1xufVxuR2l0RXJyb3JWaWV3TW9kZWwucHJvdG90eXBlLmVuYWJsZUJ1Z3RyYWNraW5nQW5kU3RhdGlzdGljcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyLmdldFByb21pc2UoJy91c2VyY29uZmlnJylcbiAgICAudGhlbihmdW5jdGlvbih1c2VyQ29uZmlnKSB7XG4gICAgICB1c2VyQ29uZmlnLmJ1Z3RyYWNraW5nID0gdHJ1ZTtcbiAgICAgIHVzZXJDb25maWcuc2VuZFVzYWdlU3RhdGlzdGljcyA9IHRydWU7XG4gICAgICByZXR1cm4gc2VsZi5zZXJ2ZXIucG9zdFByb21pc2UoJy91c2VyY29uZmlnJywgdXNlckNvbmZpZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYuc2hvd0VuYWJsZUJ1Z3RyYWNraW5nKGZhbHNlKTsgfSlcbiAgICB9KTtcbn1cbiJdfQ==

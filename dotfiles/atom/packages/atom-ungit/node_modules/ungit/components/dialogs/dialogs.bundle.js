(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var ko = require('knockout');
var inherits = require('util').inherits;
var components = require('ungit-components');
var Promise = require('bluebird');
var programEvents = require('ungit-program-events');

components.register('formdialog', function(args) {
  return new FormDialogViewModel(args.title);
});

components.register('credentialsdialog', function(args) {
  return new CredentialsDialogViewModel({remote: args.remote});
});

components.register('addremotedialog', function(args) {
  return new AddRemoteDialogViewModel();
});

components.register('addsubmoduledialog', function(args) {
  return new AddSubmoduleDialogViewModel();
});

components.register('promptdialog', function(args) {
  return new PromptDialogViewModel(args.title, args.details);
});

components.register('yesnodialog', function(args) {
  return new YesNoDialogViewModel(args.title, args.details);
});

components.register('yesnomutedialog', function(args) {
  return new YesNoMuteDialogViewModel(args.title, args.details);
});

components.register('toomanyfilesdialogviewmodel', function(args) {
  return new TooManyFilesDialogViewModel(args.title, args.details);
});

components.register('texteditdialog', function(args) {
  return new TextEditDialog(args.title, args.content);
});

function DialogViewModel(title) {
  var self = this;
  this.onclose = null;
  this.title = ko.observable(title);
  this.taDialogName = ko.observable('');
  this.closePromise = new Promise(function(resolve) {
    self.onclose = resolve;
  });
}
DialogViewModel.prototype.closeThen = function(thenFunc) {
  this.closePromise = this.closePromise.then(thenFunc);
  return this;
}
DialogViewModel.prototype.setCloser = function(closer) {
  this.close = closer;
}
DialogViewModel.prototype.show = function() {
  programEvents.dispatch({ event: 'request-show-dialog', dialog: this });
  return this;
}

function FormDialogViewModel(title) {
  DialogViewModel.call(this, title);
  this.items = ko.observable([]);
  this.isSubmitted = ko.observable(false);
  this.showCancel = ko.observable(true);
}
inherits(FormDialogViewModel, DialogViewModel);
FormDialogViewModel.prototype.template = 'formDialog';
FormDialogViewModel.prototype.submit = function() {
  this.isSubmitted(true);
  this.close();
}


function CredentialsDialogViewModel(args) {
  FormDialogViewModel.call(this);
  this.title(`Remote ${args.remote} requires authentication`);
  this.taDialogName('credentials-dialog');
  this.showCancel(false);
  this.username = ko.observable();
  this.password = ko.observable();
  this.items([
    { name: 'Username', value: this.username, placeholder: 'Username', type: 'text', autofocus: true, taName: 'username' },
    { name: 'Password', value: this.password, placeholder: 'Password', type: 'password', autofocus: false, taName: 'password' }
  ]);
}
inherits(CredentialsDialogViewModel, FormDialogViewModel);


function AddRemoteDialogViewModel() {
  FormDialogViewModel.call(this);
  this.title('Add new remote');
  this.taDialogName('add-remote');
  this.name = ko.observable();
  this.url = ko.observable();
  this.items([
    { name: 'Name', value: this.name, placeholder: 'Name', type: 'text', autofocus: true, taName: 'name' },
    { name: 'Url', value: this.url, placeholder: 'Url', type: 'text', autofocus: false, taName: 'url' }
  ]);
}
inherits(AddRemoteDialogViewModel, FormDialogViewModel);

function AddSubmoduleDialogViewModel() {
  FormDialogViewModel.call(this);
  this.title('Add new submodule');
  this.taDialogName('add-submodule');
  this.path = ko.observable();
  this.url = ko.observable();
  this.items([
    { name: 'Path', value: this.path, placeholder: 'Path', type: 'text', autofocus: true, taName: 'path' },
    { name: 'Url', value: this.url, placeholder: 'Url', type: 'text', autofocus: false, taName: 'url' }
  ]);
}
inherits(AddSubmoduleDialogViewModel, FormDialogViewModel);

function PromptDialogViewModel(title, details) {
  DialogViewModel.call(this, title);
  this.alternatives = ko.observable();
  this.details = ko.observable(details);
}
inherits(PromptDialogViewModel, DialogViewModel);
PromptDialogViewModel.prototype.template = 'prompt';

function YesNoDialogViewModel(title, details) {
  PromptDialogViewModel.call(this, title, details);
  var self = this;
  this.taDialogName('yes-no-dialog');
  this.result = ko.observable(false);
  this.alternatives([
    { label: 'Yes', primary: true, taId: 'yes', click: function() { self.result(true); self.close(); } },
    { label: 'No', primary: false, taId: 'no', click: function() { self.result(false); self.close(); } },
  ]);
}
inherits(YesNoDialogViewModel, PromptDialogViewModel);

function YesNoMuteDialogViewModel(title, details) {
  PromptDialogViewModel.call(this, title, details);
  var self = this;
  this.taDialogName('yes-no-mute-dialog');
  this.result = ko.observable(false);
  this.alternatives([
    { label: 'Yes', primary: true, taId: 'yes', click: function() { self.result(true); self.close(); } },
    { label: 'Yes and mute for awhile', primary: false, taId: 'mute', click: function() { self.result("mute"); self.close(); } },
    { label: 'No', primary: false, taId: 'no', click: function() { self.result(false); self.close(); } }
  ]);
}
inherits(YesNoMuteDialogViewModel, PromptDialogViewModel);

function TooManyFilesDialogViewModel(title, details) {
  PromptDialogViewModel.call(this, title, details);
  var self = this;
  this.taDialogName('yes-no-dialog');
  this.result = ko.observable(false);
  this.alternatives([
    { label: "Don't load", primary: true, taId: 'noLoad', click: function() { self.result(false); self.close(); } },
    { label: 'Load anyway', primary: false, taId: 'loadAnyway', click: function() { self.result(true); self.close(); } },
  ]);
}
inherits(TooManyFilesDialogViewModel, PromptDialogViewModel);

function TextEditDialog(title, content) {
  PromptDialogViewModel.call(this, title, `<textarea class="text-area-content" rows="30" cols="75" style="height:250px;width: 100%">${content}</textarea>`);
  var self = this;
  this.taDialogName('text-edit-dialog');
  this.result = ko.observable(false);
  this.alternatives([
    { label: "Save", primary: true, taId: 'save', click: function() {
        self.textAreaContent = document.querySelector('.modal-body .text-area-content').value;
        self.result(true);
        self.close();
      }
    },
    { label: 'Cancel', primary: false, taId: 'cancel', click: function() { self.result(false); self.close(); } },
  ]);
}
inherits(TextEditDialog, PromptDialogViewModel);

},{"bluebird":undefined,"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events","util":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
